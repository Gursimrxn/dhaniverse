@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #000000;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
@font-face {
  font-family: 'Pixeloid';
  src: url('/fonts/PixeloidSansBold.ttf') format('truetype');
}
@font-face {
  font-family: 'VCR OSD Mono';
  src: url('/fonts/VCR_OSD_MONO_1.001.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: 'Tickerbit';
  src: url('/fonts/Tickerbit-regular.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: 'Robert';
  src: url('/fonts/Robert.otf') format('opentype');
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
.pixeloid {
  font-family: 'Pixeloid', sans-serif;
  font-weight: 700;
  font-size: 1.2em;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;

    --sidebar-background: 0 0% 98%;

    --sidebar-foreground: 240 5.3% 26.1%;

    --sidebar-primary: 240 5.9% 10%;

    --sidebar-primary-foreground: 0 0% 98%;

    --sidebar-accent: 240 4.8% 95.9%;

    --sidebar-accent-foreground: 240 5.9% 10%;

    --sidebar-border: 220 13% 91%;

    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-black text-white font-vcr overflow-x-hidden;
  }
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

#app {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.vanilla:hover {
  filter: drop-shadow(0 0 2em #3178c6aa);
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

@layer components {
  /* Gradient eclipse background styling */
  .gradient-eclipse {
    @apply fixed inset-0 z-[-2] overflow-hidden;
    background: radial-gradient(circle at 50% 15%, rgba(180, 138, 0, 0.5) 0%, rgba(82, 63, 0, 0.4) 20%, rgba(28, 24, 10, 0.3) 40%, rgba(0, 0, 0, 1) 90%);
  }
  
  .gradient-overlay {
    @apply fixed inset-0 z-[-1] bg-gradient-to-b from-transparent via-transparent to-black/80 pointer-events-none;
    background-image: 
      linear-gradient(to bottom, transparent 50%, rgba(0, 0, 0, 0.8) 100%), 
      repeating-linear-gradient(90deg, rgba(255, 199, 0, 0.03) 0px, rgba(255, 199, 0, 0.03) 1px, transparent 1px, transparent 60px),
      repeating-linear-gradient(0deg, rgba(255, 199, 0, 0.03) 0px, rgba(255, 199, 0, 0.03) 1px, transparent 1px, transparent 60px);
  }

  /* Pixel corners styling for card elements */
  .pixel-corners {
    --pixel-size: 6px;
    --pixel-color: #FFC700;
    clip-path: 
      polygon(
        0 var(--pixel-size), 
        var(--pixel-size) var(--pixel-size), 
        var(--pixel-size) 0, 
        calc(100% - var(--pixel-size)) 0, 
        calc(100% - var(--pixel-size)) var(--pixel-size), 
        100% var(--pixel-size), 
        100% calc(100% - var(--pixel-size)), 
        calc(100% - var(--pixel-size)) calc(100% - var(--pixel-size)), 
        calc(100% - var(--pixel-size)) 100%, 
        var(--pixel-size) 100%, 
        var(--pixel-size) calc(100% - var(--pixel-size)), 
        0 calc(100% - var(--pixel-size))
      );
    position: relative;
  }

  .pixel-corners::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: transparent;
    border: var(--pixel-size) solid var(--pixel-color);
    clip-path: 
      polygon(
        0 var(--pixel-size), 
        var(--pixel-size) var(--pixel-size), 
        var(--pixel-size) 0, 
        calc(100% - var(--pixel-size)) 0, 
        calc(100% - var(--pixel-size)) var(--pixel-size), 
        100% var(--pixel-size), 
        100% calc(100% - var(--pixel-size)), 
        calc(100% - var(--pixel-size)) calc(100% - var(--pixel-size)), 
        calc(100% - var(--pixel-size)) 100%, 
        var(--pixel-size) 100%, 
        var(--pixel-size) calc(100% - var(--pixel-size)), 
        0 calc(100% - var(--pixel-size))
      );
    pointer-events: none;
  }
  .pixel-corners-cta {
    --pixel-size: 6px;
    --pixel-color: transparent;
    clip-path: 
      polygon(
        0 var(--pixel-size), 
        var(--pixel-size) var(--pixel-size), 
        var(--pixel-size) 0, 
        calc(100% - var(--pixel-size)) 0, 
        calc(100% - var(--pixel-size)) var(--pixel-size), 
        100% var(--pixel-size), 
        100% calc(100% - var(--pixel-size)), 
        calc(100% - var(--pixel-size)) calc(100% - var(--pixel-size)), 
        calc(100% - var(--pixel-size)) 100%, 
        var(--pixel-size) 100%, 
        var(--pixel-size) calc(100% - var(--pixel-size)), 
        0 calc(100% - var(--pixel-size))
      );
    position: relative;
  }

  .pixel-corners-cta::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: transparent;
    border: var(--pixel-size) solid var(--pixel-color);
    clip-path: 
      polygon(
        0 var(--pixel-size), 
        var(--pixel-size) var(--pixel-size), 
        var(--pixel-size) 0, 
        calc(100% - var(--pixel-size)) 0, 
        calc(100% - var(--pixel-size)) var(--pixel-size), 
        100% var(--pixel-size), 
        100% calc(100% - var(--pixel-size)), 
        calc(100% - var(--pixel-size)) calc(100% - var(--pixel-size)), 
        calc(100% - var(--pixel-size)) 100%, 
        var(--pixel-size) 100%, 
        var(--pixel-size) calc(100% - var(--pixel-size)), 
        0 calc(100% - var(--pixel-size))
      );
    pointer-events: none;
  }

  .nav-corners {
    --pixel-size: 7px;
    --pixel-color: #3A3834;
    clip-path: 
      polygon(
        0 var(--pixel-size), 
        var(--pixel-size) var(--pixel-size), 
        var(--pixel-size) 0, 
        calc(100% - var(--pixel-size)) 0, 
        calc(100% - var(--pixel-size)) var(--pixel-size), 
        100% var(--pixel-size), 
        100% calc(100% - var(--pixel-size)), 
        calc(100% - var(--pixel-size)) calc(100% - var(--pixel-size)), 
        calc(100% - var(--pixel-size)) 100%, 
        var(--pixel-size) 100%, 
        var(--pixel-size) calc(100% - var(--pixel-size)), 
        0 calc(100% - var(--pixel-size))
      );
    position: relative;
  }

  .nav-corners::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: transparent;
    border: var(--pixel-size) solid var(--pixel-color);
    clip-path: 
      polygon(
        0 var(--pixel-size), 
        var(--pixel-size) var(--pixel-size), 
        var(--pixel-size) 0, 
        calc(100% - var(--pixel-size)) 0, 
        calc(100% - var(--pixel-size)) var(--pixel-size), 
        100% var(--pixel-size), 
        100% calc(100% - var(--pixel-size)), 
        calc(100% - var(--pixel-size)) calc(100% - var(--pixel-size)), 
        calc(100% - var(--pixel-size)) 100%, 
        var(--pixel-size) 100%, 
        var(--pixel-size) calc(100% - var(--pixel-size)), 
        0 calc(100% - var(--pixel-size))
      );
    pointer-events: none;
  }

  .pixel-box {
    --b: 2px;  /* border thickness */
    --c: #FFC700; /* border color */
    --w: 2px;  /* width of the border's step */
    
    padding: var(--b);
    position: relative;
    border: 1px solid var(--c);
    background-clip: padding-box;
  }

  .pixel-box::before {
    content: "";
    position: absolute;
    inset: 0;
    background: var(--c);
    padding: var(--b);
    mask:
      conic-gradient(at var(--w) var(--w),#0000 75%,#000 0)
       0 0/calc(100% - var(--w)) calc(100% - var(--w));
    mask-composite: subtract;
    pointer-events: none;
  }
  
  /* Animation for glowing pixel effect */
  .pixel-glow {
    animation: pixel-pulse 2s infinite alternate;
  }
  
  @keyframes pixel-pulse {
    0% {
      filter: drop-shadow(0 0 2px rgba(255, 199, 0, 0.3));
    }
    100% {
      filter: drop-shadow(0 0 8px rgba(255, 199, 0, 0.7));
    }
  }
  
  /* Scanline effect for retro CRT look */
  .scanlines {
    position: relative;
    overflow: hidden;
  }
  
  .scanlines::before {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    background: repeating-linear-gradient(
      to bottom,
      transparent 0%,
      rgba(0, 0, 0, 0.05) 0.5%,
      transparent 1%
    );
    pointer-events: none;
    z-index: 1;
  }
  
  /* Testimony card style */
  .testimony-card {
    @apply bg-dhani-darkgray p-4;
    position: relative;
    border: 0;
    --pixel-card-size: 2px;
    --pixel-card-color: #FFC700;
    height: 100%;
    min-height: 150px;
    display: flex;
    flex-direction: column;
  }
  
  .testimony-card::before {
    content: '';
    position: absolute;
    inset: 0;
    border: var(--pixel-card-size) solid var(--pixel-card-color);
    pointer-events: none;
    clip-path: 
      polygon(
        0 var(--pixel-card-size), 
        var(--pixel-card-size) var(--pixel-card-size), 
        var(--pixel-card-size) 0, 
        calc(100% - var(--pixel-card-size)) 0, 
        calc(100% - var(--pixel-card-size)) var(--pixel-card-size), 
        100% var(--pixel-card-size), 
        100% calc(100% - var(--pixel-card-size)), 
        calc(100% - var(--pixel-card-size)) calc(100% - var(--pixel-card-size)), 
        calc(100% - var(--pixel-card-size)) 100%, 
        var(--pixel-card-size) 100%, 
        var(--pixel-card-size) calc(100% - var(--pixel-card-size)), 
        0 calc(100% - var(--pixel-card-size))
      );
  }
  
  /* Game building card style */
  .game-building-card {
    @apply overflow-hidden pixel-corners border-2 border-dhani-gold;
  }

  /* Override rounded corners for pixel-corners */
  .pixel-corners, .nav-corners, button.pixel-corners {
    border-radius: 0 !important;
  }
  /* Decorative blurred blobs */
  .blob {
    position: fixed;
    border-radius: 9999px;
    filter: blur(180px);
    opacity: 0.25;
    pointer-events: none;
    z-index: -1;
  }
  .blob-1 {
    width: 400px;
    height: 400px;
    background: rgba(255, 199, 0, 0.5);
    top: 5%;
    left: 15%;
  }
  .blob-2 {
    width: 500px;
    height: 500px;
    background: rgba(0, 191, 255, 0.3);
    bottom: 15%;
    right: 20%;
  }
  .blob-3 {
    width: 350px;
    height: 350px;
    background: rgba(255, 120, 0, 0.3);
    top: 45%;
    right: 10%;
  }
  /* Uncomment and style gradient overlay to stay fixed */
  .gradient-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -1;
    background-image: 
      linear-gradient(to bottom, transparent 50%, rgba(0, 0, 0, 0.8) 100%),
      repeating-linear-gradient(90deg, rgba(255, 199, 0, 0.03) 0px, rgba(255, 199, 0, 0.03) 1px, transparent 1px, transparent 60px),
      repeating-linear-gradient(0deg, rgba(255, 199, 0, 0.03) 0px, rgba(255, 199, 0, 0.03) 1px, transparent 1px, transparent 60px);
  }

  /* Enforce pixelated corners for all pixel-cornered elements */
  .pixel-corners, 
  .pixel-corners::after,
  .nav-corners,
  .nav-corners::after,
  button.pixel-corners {
    border-radius: 0 !important;
  }
  
  /* Make play button more pixel-perfect */
  button.pixel-corners.bg-dhani-gold {
    position: relative;
    --pixel-btn-size: 4px;
    background-clip: padding-box;
    border: 0;
  }
  
  button.pixel-corners.bg-dhani-gold::before {
    content: '';
    position: absolute;
    inset: 0;
    background: #FFC700;
    clip-path: 
      polygon(
        0 var(--pixel-btn-size), 
        var(--pixel-btn-size) var(--pixel-btn-size), 
        var(--pixel-btn-size) 0, 
        calc(100% - var(--pixel-btn-size)) 0, 
        calc(100% - var(--pixel-btn-size)) var(--pixel-btn-size), 
        100% var(--pixel-btn-size), 
        100% calc(100% - var(--pixel-btn-size)), 
        calc(100% - var(--pixel-btn-size)) calc(100% - var(--pixel-btn-size)), 
        calc(100% - var(--pixel-btn-size)) 100%, 
        var(--pixel-btn-size) 100%, 
        var(--pixel-btn-size) calc(100% - var(--pixel-btn-size)), 
        0 calc(100% - var(--pixel-btn-size))
      );
    z-index: -1;
  }

  /* behind video player blur */
  .video-blob-green {
    position: absolute;
    width: 980px;
    height: 700px;
    background: #8fcb8f70;
    filter: blur(150px);
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1;
    animation: blobPulse 5s ease-in-out infinite;
  }

  /* Smooth shimmer effect animation for highlighted buttons */
  .shimmer-effect {
    position: relative;
    background: var(--shimmer-base-color, #fff8df);
    color: var(--shimmer-text-color, #000);
    border-color: transparent;
    overflow: hidden;
  }

  .shimmer-effect::before {
    content: '';
    position: absolute;
    top: 0;
    width: 120px;
    height: 100%;
    background: linear-gradient(
      to right, 
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 248, 197, 0.4) 25%, 
      rgba(255, 248, 199, 0.8) 100%,
      rgba(255, 248, 197, 0.4) 75%,
      rgba(255, 255, 255, 0) 100%
    );
    animation: shimmer-wave 2.2s infinite ease-in-out;
    transform: skewX(-15deg);
  }

  @keyframes shimmer-wave {
    0% {
      left: -180px;
    }
    100% {
      left: 100%;
    }
  }
}

@keyframes blobPulse {
  0%, 100% {
    transform: translate(-50%, -50%) scale(1);
    background: #8fcb8f70;
    filter: blur(150px);
  }
  50% {
    transform: translate(-50%, -50%) scale(1);
    background: #d1fbc770;
    filter: blur(150px);
  }
}
